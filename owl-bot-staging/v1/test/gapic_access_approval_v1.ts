// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as accessapprovalModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.AccessApprovalClient', () => {
    it('has servicePath', () => {
        const servicePath = accessapprovalModule.v1.AccessApprovalClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = accessapprovalModule.v1.AccessApprovalClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = accessapprovalModule.v1.AccessApprovalClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new accessapprovalModule.v1.AccessApprovalClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new accessapprovalModule.v1.AccessApprovalClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.accessApprovalStub, undefined);
        await client.initialize();
        assert(client.accessApprovalStub);
    });

    it('has close method for the initialized client', done => {
        const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.initialize();
        assert(client.accessApprovalStub);
        client.close().then(() => {
            done();
        });
    });

    it('has close method for the non-initialized client', done => {
        const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.accessApprovalStub, undefined);
        client.close().then(() => {
            done();
        });
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getApprovalRequest', () => {
        it('invokes getApprovalRequest without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest());
            client.innerApiCalls.getApprovalRequest = stubSimpleCall(expectedResponse);
            const [response] = await client.getApprovalRequest(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getApprovalRequest without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest());
            client.innerApiCalls.getApprovalRequest = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getApprovalRequest(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.accessapproval.v1.IApprovalRequest|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getApprovalRequest with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getApprovalRequest = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getApprovalRequest(request), expectedError);
            assert((client.innerApiCalls.getApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getApprovalRequest with closed client', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetApprovalRequestMessage());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getApprovalRequest(request), expectedError);
        });
    });

    describe('approveApprovalRequest', () => {
        it('invokes approveApprovalRequest without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApproveApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest());
            client.innerApiCalls.approveApprovalRequest = stubSimpleCall(expectedResponse);
            const [response] = await client.approveApprovalRequest(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.approveApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes approveApprovalRequest without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApproveApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest());
            client.innerApiCalls.approveApprovalRequest = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.approveApprovalRequest(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.accessapproval.v1.IApprovalRequest|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.approveApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes approveApprovalRequest with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApproveApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.approveApprovalRequest = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.approveApprovalRequest(request), expectedError);
            assert((client.innerApiCalls.approveApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes approveApprovalRequest with closed client', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApproveApprovalRequestMessage());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.approveApprovalRequest(request), expectedError);
        });
    });

    describe('dismissApprovalRequest', () => {
        it('invokes dismissApprovalRequest without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DismissApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest());
            client.innerApiCalls.dismissApprovalRequest = stubSimpleCall(expectedResponse);
            const [response] = await client.dismissApprovalRequest(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.dismissApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes dismissApprovalRequest without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DismissApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest());
            client.innerApiCalls.dismissApprovalRequest = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.dismissApprovalRequest(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.accessapproval.v1.IApprovalRequest|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.dismissApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes dismissApprovalRequest with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DismissApprovalRequestMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.dismissApprovalRequest = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.dismissApprovalRequest(request), expectedError);
            assert((client.innerApiCalls.dismissApprovalRequest as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes dismissApprovalRequest with closed client', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DismissApprovalRequestMessage());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.dismissApprovalRequest(request), expectedError);
        });
    });

    describe('getAccessApprovalSettings', () => {
        it('invokes getAccessApprovalSettings without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetAccessApprovalSettingsMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.AccessApprovalSettings());
            client.innerApiCalls.getAccessApprovalSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getAccessApprovalSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAccessApprovalSettings without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetAccessApprovalSettingsMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.AccessApprovalSettings());
            client.innerApiCalls.getAccessApprovalSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAccessApprovalSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.accessapproval.v1.IAccessApprovalSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getAccessApprovalSettings with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetAccessApprovalSettingsMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getAccessApprovalSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAccessApprovalSettings(request), expectedError);
            assert((client.innerApiCalls.getAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAccessApprovalSettings with closed client', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.GetAccessApprovalSettingsMessage());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getAccessApprovalSettings(request), expectedError);
        });
    });

    describe('updateAccessApprovalSettings', () => {
        it('invokes updateAccessApprovalSettings without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.UpdateAccessApprovalSettingsMessage());
            request.settings = {};
            request.settings.name = '';
            const expectedHeaderRequestParams = "settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.AccessApprovalSettings());
            client.innerApiCalls.updateAccessApprovalSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.updateAccessApprovalSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAccessApprovalSettings without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.UpdateAccessApprovalSettingsMessage());
            request.settings = {};
            request.settings.name = '';
            const expectedHeaderRequestParams = "settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.accessapproval.v1.AccessApprovalSettings());
            client.innerApiCalls.updateAccessApprovalSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAccessApprovalSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.accessapproval.v1.IAccessApprovalSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateAccessApprovalSettings with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.UpdateAccessApprovalSettingsMessage());
            request.settings = {};
            request.settings.name = '';
            const expectedHeaderRequestParams = "settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAccessApprovalSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateAccessApprovalSettings(request), expectedError);
            assert((client.innerApiCalls.updateAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAccessApprovalSettings with closed client', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.UpdateAccessApprovalSettingsMessage());
            request.settings = {};
            request.settings.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateAccessApprovalSettings(request), expectedError);
        });
    });

    describe('deleteAccessApprovalSettings', () => {
        it('invokes deleteAccessApprovalSettings without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DeleteAccessApprovalSettingsMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAccessApprovalSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteAccessApprovalSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAccessApprovalSettings without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DeleteAccessApprovalSettingsMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAccessApprovalSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAccessApprovalSettings(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteAccessApprovalSettings with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DeleteAccessApprovalSettingsMessage());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAccessApprovalSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteAccessApprovalSettings(request), expectedError);
            assert((client.innerApiCalls.deleteAccessApprovalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAccessApprovalSettings with closed client', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.DeleteAccessApprovalSettingsMessage());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteAccessApprovalSettings(request), expectedError);
        });
    });

    describe('listApprovalRequests', () => {
        it('invokes listApprovalRequests without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
            ];
            client.innerApiCalls.listApprovalRequests = stubSimpleCall(expectedResponse);
            const [response] = await client.listApprovalRequests(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listApprovalRequests as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listApprovalRequests without error using callback', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
            ];
            client.innerApiCalls.listApprovalRequests = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listApprovalRequests(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.accessapproval.v1.IApprovalRequest[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listApprovalRequests as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listApprovalRequests with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listApprovalRequests = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listApprovalRequests(request), expectedError);
            assert((client.innerApiCalls.listApprovalRequests as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listApprovalRequestsStream without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
            ];
            client.descriptors.page.listApprovalRequests.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listApprovalRequestsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.accessapproval.v1.ApprovalRequest[] = [];
                stream.on('data', (response: protos.google.cloud.accessapproval.v1.ApprovalRequest) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listApprovalRequests.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApprovalRequests, request));
            assert.strictEqual(
                (client.descriptors.page.listApprovalRequests.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listApprovalRequestsStream with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listApprovalRequests.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listApprovalRequestsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.accessapproval.v1.ApprovalRequest[] = [];
                stream.on('data', (response: protos.google.cloud.accessapproval.v1.ApprovalRequest) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listApprovalRequests.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApprovalRequests, request));
            assert.strictEqual(
                (client.descriptors.page.listApprovalRequests.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listApprovalRequests without error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
              generateSampleMessage(new protos.google.cloud.accessapproval.v1.ApprovalRequest()),
            ];
            client.descriptors.page.listApprovalRequests.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.accessapproval.v1.IApprovalRequest[] = [];
            const iterable = client.listApprovalRequestsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listApprovalRequests.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listApprovalRequests.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listApprovalRequests with error', async () => {
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.accessapproval.v1.ListApprovalRequestsMessage());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listApprovalRequests.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listApprovalRequestsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.accessapproval.v1.IApprovalRequest[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listApprovalRequests.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listApprovalRequests.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('folderAccessApprovalSettings', () => {
            const fakePath = "/rendered/path/folderAccessApprovalSettings";
            const expectedParameters = {
                folder: "folderValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderAccessApprovalSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderAccessApprovalSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderAccessApprovalSettingsPath', () => {
                const result = client.folderAccessApprovalSettingsPath("folderValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderAccessApprovalSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderAccessApprovalSettingsName', () => {
                const result = client.matchFolderFromFolderAccessApprovalSettingsName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderAccessApprovalSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderApprovalRequest', () => {
            const fakePath = "/rendered/path/folderApprovalRequest";
            const expectedParameters = {
                folder: "folderValue",
                approval_request: "approvalRequestValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderApprovalRequestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderApprovalRequestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderApprovalRequestPath', () => {
                const result = client.folderApprovalRequestPath("folderValue", "approvalRequestValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderApprovalRequestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderApprovalRequestName', () => {
                const result = client.matchFolderFromFolderApprovalRequestName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderApprovalRequestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApprovalRequestFromFolderApprovalRequestName', () => {
                const result = client.matchApprovalRequestFromFolderApprovalRequestName(fakePath);
                assert.strictEqual(result, "approvalRequestValue");
                assert((client.pathTemplates.folderApprovalRequestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationAccessApprovalSettings', () => {
            const fakePath = "/rendered/path/organizationAccessApprovalSettings";
            const expectedParameters = {
                organization: "organizationValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationAccessApprovalSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationAccessApprovalSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationAccessApprovalSettingsPath', () => {
                const result = client.organizationAccessApprovalSettingsPath("organizationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationAccessApprovalSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationAccessApprovalSettingsName', () => {
                const result = client.matchOrganizationFromOrganizationAccessApprovalSettingsName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationAccessApprovalSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationApprovalRequest', () => {
            const fakePath = "/rendered/path/organizationApprovalRequest";
            const expectedParameters = {
                organization: "organizationValue",
                approval_request: "approvalRequestValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationApprovalRequestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationApprovalRequestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationApprovalRequestPath', () => {
                const result = client.organizationApprovalRequestPath("organizationValue", "approvalRequestValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationApprovalRequestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationApprovalRequestName', () => {
                const result = client.matchOrganizationFromOrganizationApprovalRequestName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationApprovalRequestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApprovalRequestFromOrganizationApprovalRequestName', () => {
                const result = client.matchApprovalRequestFromOrganizationApprovalRequestName(fakePath);
                assert.strictEqual(result, "approvalRequestValue");
                assert((client.pathTemplates.organizationApprovalRequestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectAccessApprovalSettings', () => {
            const fakePath = "/rendered/path/projectAccessApprovalSettings";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectAccessApprovalSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectAccessApprovalSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectAccessApprovalSettingsPath', () => {
                const result = client.projectAccessApprovalSettingsPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectAccessApprovalSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectAccessApprovalSettingsName', () => {
                const result = client.matchProjectFromProjectAccessApprovalSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectAccessApprovalSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectApprovalRequest', () => {
            const fakePath = "/rendered/path/projectApprovalRequest";
            const expectedParameters = {
                project: "projectValue",
                approval_request: "approvalRequestValue",
            };
            const client = new accessapprovalModule.v1.AccessApprovalClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectApprovalRequestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectApprovalRequestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectApprovalRequestPath', () => {
                const result = client.projectApprovalRequestPath("projectValue", "approvalRequestValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectApprovalRequestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectApprovalRequestName', () => {
                const result = client.matchProjectFromProjectApprovalRequestName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectApprovalRequestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApprovalRequestFromProjectApprovalRequestName', () => {
                const result = client.matchApprovalRequestFromProjectApprovalRequestName(fakePath);
                assert.strictEqual(result, "approvalRequestValue");
                assert((client.pathTemplates.projectApprovalRequestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
